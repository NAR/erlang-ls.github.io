{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Erlang LS Implementing features such as auto-complete or go-to-definition for a programming language is not trivial. Traditionally, this work had to be repeated for each development tool and it required a mix of expertise in both the targeted programming language and the programming language internally used by the development tool of choice. A brilliant intuition, the Language Server Protocol , also known as LSP , changes the rules of the game. A real blessing for the Erlang community. Erlang LS is a language server providing language features for the Erlang programming language. The server works with Emacs , VSCode , Sublime Text 3 , Vim and probably many more text editors and IDE which adhere to the LSP protocol. These pages contain all the information needed to configure your favourite text editor or IDE and to work with Erlang LS. You will also find instructions on how to configure the server to recognize the structure of your projects and to troubleshoot your installation when things do not work as expected. Get in touch If you have any questions about the project, feel free to open a new issue on GitHub. You can also join the #erlang-ls channel in the Erlanger Slack if you would like to get involved or if you prefer a more informal mean of communication. All contributions are welcome, be them in the form of a bug report, a question, feedback, or code.","title":"Overview"},{"location":"#welcome-to-erlang-ls","text":"Implementing features such as auto-complete or go-to-definition for a programming language is not trivial. Traditionally, this work had to be repeated for each development tool and it required a mix of expertise in both the targeted programming language and the programming language internally used by the development tool of choice. A brilliant intuition, the Language Server Protocol , also known as LSP , changes the rules of the game. A real blessing for the Erlang community. Erlang LS is a language server providing language features for the Erlang programming language. The server works with Emacs , VSCode , Sublime Text 3 , Vim and probably many more text editors and IDE which adhere to the LSP protocol. These pages contain all the information needed to configure your favourite text editor or IDE and to work with Erlang LS. You will also find instructions on how to configure the server to recognize the structure of your projects and to troubleshoot your installation when things do not work as expected.","title":"Welcome to Erlang LS"},{"location":"#get-in-touch","text":"If you have any questions about the project, feel free to open a new issue on GitHub. You can also join the #erlang-ls channel in the Erlanger Slack if you would like to get involved or if you prefer a more informal mean of communication. All contributions are welcome, be them in the form of a bug report, a question, feedback, or code.","title":"Get in touch"},{"location":"configuration/","text":"Configuration The erlang_ls.config file It is possible to customize the behaviour of the erlang_ls server via a configuration file, named erlang_ls.config . The erlang_ls.config file should be placed in the root directory of a given project to store the configuration for that project. A sample erlang_ls.config file would look like the following: otp_path: \"/path/to/otp/lib/erlang\" deps_dirs: - \"lib/*\" diagnostics: enabled: - crossref disabled: - dialyzer include_dirs: - \"include\" - \"_build/default/lib\" lenses: enabled: - ct-run-test disabled: - show-behaviour-usages macros: - name: DEFINED_WITH_VALUE value: 42 - name: DEFINED_WITHOUT_VALUE code_reload: node: node@example The file format is yaml . The following customizations are possible: Parameter Description apps_dirs List of directories containing project applications. It supports wildcards. code_reload Whether or not an rpc call should be made to a remote node to compile and reload a module deps_dirs List of directories containing dependencies. It supports wildcards. diagnostics Customize the list of active diagnostics include_dirs List of directories provided to the compiler as include dirs. It supports wildcards. lenses Customize the list of active code lenses macros List of cusom macros to be passed to the compiler, expressed as a name/value pair. If the value is omitted or is invalid, 'true' is used. otp_apps_exclude List of OTP applications that will not be indexed (default: megaco, diameter, snmp, wx) otp_path Path to the OTP installation plt_path Path to the dialyzer PLT file. When none is provided the dialyzer diagnostics will not be available. Diagnostics When a file is open or saved, a list of diagnostics are run in the background, reporting eventual issues with the code base to the editor. The following diagnostics are available: Diagnostic Name Purpose compiler Report in-line warnings and errors from the Erlang compiler dialyzer Use the dialyzer static analysis tool to find discrepancies in your code elvis Use elvis to review the style of your Erlang code crossref Use information from the Erlang LS Database to find out about undefined functions Currently, all of the available diagnostics are enabled by default. It is possible to customize diagnostics for a specific project. For example: diagnostics: disabled: - dialyzer - crossref Automatic Code Reloading The code_reload takes the following options: Parameter Description node The node to be called for code reloading. Example erlang_ls@hostname Code Lenses Code Lenses are also available in Erlang LS. The following lenses are available in Erlang LS: Code Lens Name Purpose ct-run-test Display a run button next to a Common Test testcase server-info Display some Erlang LS server information on the top of each module. For debug only. show-behaviour-usages Show the number of modules implementing a behaviour The following lenses are enabled by default: show-behaviour-usages It is possible to customize lenses for a specific project. For example: lenses: enabled: - ct-run-test disabled: - show-behaviour-usages Global Configuration It is also possible to store a system-wide default configuration in an erlang_ls.config file located in the User Config directory. The exact location of the User Config directory depends on the operating system used and it can be identified by executing the following command on an Erlang shell: > filename:basedir(user_config, \"erlang_ls\"). Normally, the location of the User Config directory is: Operating System User Config Directory Linux /home/USER/.config/erlang_ls OS X /Users/USER/Library/Application\\ Support/erlang_ls Windows c:/Users/USER/AppData/Local/erlang_ls Thus on Linux, for example, the full path to the default configuation file would be /home/USER/.config/erlang_ls/erlang_ls.config","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#the-erlang_lsconfig-file","text":"It is possible to customize the behaviour of the erlang_ls server via a configuration file, named erlang_ls.config . The erlang_ls.config file should be placed in the root directory of a given project to store the configuration for that project. A sample erlang_ls.config file would look like the following: otp_path: \"/path/to/otp/lib/erlang\" deps_dirs: - \"lib/*\" diagnostics: enabled: - crossref disabled: - dialyzer include_dirs: - \"include\" - \"_build/default/lib\" lenses: enabled: - ct-run-test disabled: - show-behaviour-usages macros: - name: DEFINED_WITH_VALUE value: 42 - name: DEFINED_WITHOUT_VALUE code_reload: node: node@example The file format is yaml . The following customizations are possible: Parameter Description apps_dirs List of directories containing project applications. It supports wildcards. code_reload Whether or not an rpc call should be made to a remote node to compile and reload a module deps_dirs List of directories containing dependencies. It supports wildcards. diagnostics Customize the list of active diagnostics include_dirs List of directories provided to the compiler as include dirs. It supports wildcards. lenses Customize the list of active code lenses macros List of cusom macros to be passed to the compiler, expressed as a name/value pair. If the value is omitted or is invalid, 'true' is used. otp_apps_exclude List of OTP applications that will not be indexed (default: megaco, diameter, snmp, wx) otp_path Path to the OTP installation plt_path Path to the dialyzer PLT file. When none is provided the dialyzer diagnostics will not be available.","title":"The erlang_ls.config file"},{"location":"configuration/#diagnostics","text":"When a file is open or saved, a list of diagnostics are run in the background, reporting eventual issues with the code base to the editor. The following diagnostics are available: Diagnostic Name Purpose compiler Report in-line warnings and errors from the Erlang compiler dialyzer Use the dialyzer static analysis tool to find discrepancies in your code elvis Use elvis to review the style of your Erlang code crossref Use information from the Erlang LS Database to find out about undefined functions Currently, all of the available diagnostics are enabled by default. It is possible to customize diagnostics for a specific project. For example: diagnostics: disabled: - dialyzer - crossref","title":"Diagnostics"},{"location":"configuration/#automatic-code-reloading","text":"The code_reload takes the following options: Parameter Description node The node to be called for code reloading. Example erlang_ls@hostname","title":"Automatic Code Reloading"},{"location":"configuration/#code-lenses","text":"Code Lenses are also available in Erlang LS. The following lenses are available in Erlang LS: Code Lens Name Purpose ct-run-test Display a run button next to a Common Test testcase server-info Display some Erlang LS server information on the top of each module. For debug only. show-behaviour-usages Show the number of modules implementing a behaviour The following lenses are enabled by default: show-behaviour-usages It is possible to customize lenses for a specific project. For example: lenses: enabled: - ct-run-test disabled: - show-behaviour-usages","title":"Code Lenses"},{"location":"configuration/#global-configuration","text":"It is also possible to store a system-wide default configuration in an erlang_ls.config file located in the User Config directory. The exact location of the User Config directory depends on the operating system used and it can be identified by executing the following command on an Erlang shell: > filename:basedir(user_config, \"erlang_ls\"). Normally, the location of the User Config directory is: Operating System User Config Directory Linux /home/USER/.config/erlang_ls OS X /Users/USER/Library/Application\\ Support/erlang_ls Windows c:/Users/USER/AppData/Local/erlang_ls Thus on Linux, for example, the full path to the default configuation file would be /home/USER/.config/erlang_ls/erlang_ls.config","title":"Global Configuration"},{"location":"features/","text":"Features Code Completion Get context-aware code completions for function names, macros, records, variable names and more. Go To Definition Navigate to the definition of a function, macro, record or type. Go To Implementation for OTP Behaviours Hovering a gen_server:start_link call? Jump to the respective init function with a single keystroke. Signature Suggestions Never remember the order of the lists:keytake/3 arguments? You are not alone. We got you covered. Compiler Diagnostics Display warnings and errors from the compiler. Inline. Dialyzer Diagnostics It has never been so easy to make Dialyzer happy. Elvis Diagnostics Display Elvis style suggestions inline. No more nit-picking comments from colleagues! Edoc Hover a local or remote function to see its edoc . You will miss this feature so much when edocs are not available that you will start writing them! Navigation for Included Files Navigate to included files with a single click. Find/Peek References Who is calling this function? Figure it out without leaving the current context. Outline Get a nice outline of your module on the side and jump between functions. Workspace Symbols Jump to the module you're looking for, in no time. Folding Focus on what's important, fold the rest. Snippets","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#code-completion","text":"Get context-aware code completions for function names, macros, records, variable names and more.","title":"Code Completion"},{"location":"features/#go-to-definition","text":"Navigate to the definition of a function, macro, record or type.","title":"Go To Definition"},{"location":"features/#go-to-implementation-for-otp-behaviours","text":"Hovering a gen_server:start_link call? Jump to the respective init function with a single keystroke.","title":"Go To Implementation for OTP Behaviours"},{"location":"features/#signature-suggestions","text":"Never remember the order of the lists:keytake/3 arguments? You are not alone. We got you covered.","title":"Signature Suggestions"},{"location":"features/#compiler-diagnostics","text":"Display warnings and errors from the compiler. Inline.","title":"Compiler Diagnostics"},{"location":"features/#dialyzer-diagnostics","text":"It has never been so easy to make Dialyzer happy.","title":"Dialyzer Diagnostics"},{"location":"features/#elvis-diagnostics","text":"Display Elvis style suggestions inline. No more nit-picking comments from colleagues!","title":"Elvis Diagnostics"},{"location":"features/#edoc","text":"Hover a local or remote function to see its edoc . You will miss this feature so much when edocs are not available that you will start writing them!","title":"Edoc"},{"location":"features/#navigation-for-included-files","text":"Navigate to included files with a single click.","title":"Navigation for Included Files"},{"location":"features/#findpeek-references","text":"Who is calling this function? Figure it out without leaving the current context.","title":"Find/Peek References"},{"location":"features/#outline","text":"Get a nice outline of your module on the side and jump between functions.","title":"Outline"},{"location":"features/#workspace-symbols","text":"Jump to the module you're looking for, in no time.","title":"Workspace Symbols"},{"location":"features/#folding","text":"Focus on what's important, fold the rest.","title":"Folding"},{"location":"features/#snippets","text":"","title":"Snippets"},{"location":"internals/","text":"Internals The erlang_ls Database The erlang_ls language server uses Mnesia to persist information. A new database is created and maintained for each project/OTP pair. Databases are stored in the application cache directory, which varies according to the operating system used. Generally speaking, the directory should be: Operating System Database Dir Linux /home/USER/.cache/erlang_ls OS X /Users/USER/Library/Caches/erlang_ls Windows c:/Users/USER/AppData/Local/erlang_ls/Cache You can also run the following command on an Erlang shell to identify the Database Directory on your system: > filename:basedir(user_cache, \"erlang_ls\").","title":"Internals"},{"location":"internals/#internals","text":"","title":"Internals"},{"location":"internals/#the-erlang_ls-database","text":"The erlang_ls language server uses Mnesia to persist information. A new database is created and maintained for each project/OTP pair. Databases are stored in the application cache directory, which varies according to the operating system used. Generally speaking, the directory should be: Operating System Database Dir Linux /home/USER/.cache/erlang_ls OS X /Users/USER/Library/Caches/erlang_ls Windows c:/Users/USER/AppData/Local/erlang_ls/Cache You can also run the following command on an Erlang shell to identify the Database Directory on your system: > filename:basedir(user_cache, \"erlang_ls\").","title":"The erlang_ls Database"},{"location":"talks/","text":"Talks Boost your Productivity with the Erlang Language Server 2020-09-11 Code BEAM Stockholm (Virtual) Implementing features such as auto-complete or go-to-definition for a programming language is not trivial. Traditionally, this work had to be repeated for each development tool and it required a mix of expertise in both the targeted programming language and the programming language internally used by the development tool of choice. A brilliant intuition, the \"Language Server Protocol\" (LSP), changes the rules of the game. A real blessing for the Erlang community.","title":"Talks"},{"location":"talks/#talks","text":"","title":"Talks"},{"location":"talks/#boost-your-productivity-with-the-erlang-language-server","text":"2020-09-11 Code BEAM Stockholm (Virtual) Implementing features such as auto-complete or go-to-definition for a programming language is not trivial. Traditionally, this work had to be repeated for each development tool and it required a mix of expertise in both the targeted programming language and the programming language internally used by the development tool of choice. A brilliant intuition, the \"Language Server Protocol\" (LSP), changes the rules of the game. A real blessing for the Erlang community.","title":"Boost your Productivity with the Erlang Language Server"},{"location":"troubleshooting/","text":"Troubleshooting Attaching to the Language Server via a Remote Shell Once an instance of the server is running, find the name of the node in the logs or by running epmd -names . It will look something like: $ epmd -names epmd: up and running on port 4369 with data: name erlang_ls_62880311918 at port 50819 And you can connect to it via: erl -sname debug -remsh erlang_ls_62880311918@`HOSTNAME` The redbug application is included in the escript, so feel free to use it. Logging Logs are written to your platform's log directory (i.e. the return value from filename:basedir(user_log, \"erlang_ls\") ), in a file named server.log . It's possible to customize the logging directory by using the --log-dir option when starting the server. It's also possible to specify the verbosity of the logs by using the --log-level option. In addition to the notice , debug , info , warning and error levels, syslog style loglevel comparison flags can also be used.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#attaching-to-the-language-server-via-a-remote-shell","text":"Once an instance of the server is running, find the name of the node in the logs or by running epmd -names . It will look something like: $ epmd -names epmd: up and running on port 4369 with data: name erlang_ls_62880311918 at port 50819 And you can connect to it via: erl -sname debug -remsh erlang_ls_62880311918@`HOSTNAME` The redbug application is included in the escript, so feel free to use it.","title":"Attaching to the Language Server via a Remote Shell"},{"location":"troubleshooting/#logging","text":"Logs are written to your platform's log directory (i.e. the return value from filename:basedir(user_log, \"erlang_ls\") ), in a file named server.log . It's possible to customize the logging directory by using the --log-dir option when starting the server. It's also possible to specify the verbosity of the logs by using the --log-level option. In addition to the notice , debug , info , warning and error levels, syslog style loglevel comparison flags can also be used.","title":"Logging"},{"location":"articles/otp-23-bring-docs/","text":"OTP 23 Brings Docs to the Shell, Erlang LS brings them to you! You may have heard that Erlang/OTP 23 introduces a couple of new functions that can be used for displaying documentation for modules, functions and types in the Erlang shell: 1> h(lists). lists This module contains functions for list processing. Unless otherwise stated, all functions assume that position numbering starts at 1. That is, the first element of a list is at position 1. Two terms T1 and T2 compare equal if T1 == T2 evaluates to true. They match if T1 =:= T2 evaluates to true. Whenever an ordering function F is expected as argument, it is assumed that the following properties hold of F for all x, y, and z: \u2022 If x F y and y F x, then x = y (F is antisymmetric). \u2022 If x F y and y F z, then x F z (F is transitive). \u2022 x F y or y F x (F is total). An example of a typical ordering function is less than or equal more (y/n)? (y) This is an amazing improvement, but as developers we often spend a good portion of our time in our IDE of choice, be it VSCode , Emacs , Vim or anything else. Wouldn't it be even more awesome if those pieces of documentation were closer to us in the IDE? It turns out this is something trivial to do. These pieces of documentation are stored as chunks using the format specified in the EEP-48 Erlang Enhancement Proposal and now implemented in OTP 23. Erlang LS already supports chunks , so the documentation for modules, functions and types is now available on hover when using OTP 23. This is how they look in Emacs : To get them, ensure you build your Erlang/OTP distribution with support for Doc Chunks . If you are using kerl , this is as simple as: KERL_BUILD_DOCS=yes KERL_DOC_TARGETS=chunks kerl build 23.0.1 23.0.1 KERL_BUILD_DOCS=yes kerl install 23.0.1 /your/favourite/path/to/23.0.1 Enjoy!","title":"OTP 23 Brings Docs"},{"location":"articles/otp-23-bring-docs/#otp-23-brings-docs-to-the-shell-erlang-ls-brings-them-to-you","text":"You may have heard that Erlang/OTP 23 introduces a couple of new functions that can be used for displaying documentation for modules, functions and types in the Erlang shell: 1> h(lists). lists This module contains functions for list processing. Unless otherwise stated, all functions assume that position numbering starts at 1. That is, the first element of a list is at position 1. Two terms T1 and T2 compare equal if T1 == T2 evaluates to true. They match if T1 =:= T2 evaluates to true. Whenever an ordering function F is expected as argument, it is assumed that the following properties hold of F for all x, y, and z: \u2022 If x F y and y F x, then x = y (F is antisymmetric). \u2022 If x F y and y F z, then x F z (F is transitive). \u2022 x F y or y F x (F is total). An example of a typical ordering function is less than or equal more (y/n)? (y) This is an amazing improvement, but as developers we often spend a good portion of our time in our IDE of choice, be it VSCode , Emacs , Vim or anything else. Wouldn't it be even more awesome if those pieces of documentation were closer to us in the IDE? It turns out this is something trivial to do. These pieces of documentation are stored as chunks using the format specified in the EEP-48 Erlang Enhancement Proposal and now implemented in OTP 23. Erlang LS already supports chunks , so the documentation for modules, functions and types is now available on hover when using OTP 23. This is how they look in Emacs : To get them, ensure you build your Erlang/OTP distribution with support for Doc Chunks . If you are using kerl , this is as simple as: KERL_BUILD_DOCS=yes KERL_DOC_TARGETS=chunks kerl build 23.0.1 23.0.1 KERL_BUILD_DOCS=yes kerl install 23.0.1 /your/favourite/path/to/23.0.1 Enjoy!","title":"OTP 23 Brings Docs to the Shell, Erlang LS brings them to you!"},{"location":"articles/snippets-are-here/","text":"Snippets are here Snippets are a convenient way to insert portions of code without having to write them from scratch or to copy them from an external source every single time. To start using snippets, ensure you have the latest version of Erlang LS. Then, simply start typing snippet . A dropdown with all available snippets will appear, so you can select one. A few built-in snippets are available, ranging from a try catch construct to a receive after statement, from a record attribute to edoc blocks. Snippets contain placeholders , which can be used for easier navigation via the TAB key. They also have the concept of a variable , which gets expanded automatically when the snippet is selected. The syntax for snippets is described in detail here . Contributing snippets is trivial and does not require coding. Built-in snippets are stored in the Erlang LS priv directory. It is also possible to add custom snippets by dropping them into: ~/.config/erlang_ls/snippets This mechanism allows your organization to customize snippets, so they match specific coding styles and conventions. A custom snippet which has the same name as built-in one will take precedence, so the former will override the latter in the snippets dropdown. Enjoy!","title":"Snippets are here"},{"location":"articles/snippets-are-here/#snippets-are-here","text":"Snippets are a convenient way to insert portions of code without having to write them from scratch or to copy them from an external source every single time. To start using snippets, ensure you have the latest version of Erlang LS. Then, simply start typing snippet . A dropdown with all available snippets will appear, so you can select one. A few built-in snippets are available, ranging from a try catch construct to a receive after statement, from a record attribute to edoc blocks. Snippets contain placeholders , which can be used for easier navigation via the TAB key. They also have the concept of a variable , which gets expanded automatically when the snippet is selected. The syntax for snippets is described in detail here . Contributing snippets is trivial and does not require coding. Built-in snippets are stored in the Erlang LS priv directory. It is also possible to add custom snippets by dropping them into: ~/.config/erlang_ls/snippets This mechanism allows your organization to customize snippets, so they match specific coding styles and conventions. A custom snippet which has the same name as built-in one will take precedence, so the former will override the latter in the snippets dropdown. Enjoy!","title":"Snippets are here"},{"location":"editors/emacs/","text":"Emacs Setup The official lsp-mode package includes a client for the Erlang Language Server. Here you can find a sample Emacs configuration file which installs and configures all packages required to get all of the Erlang LS features working. Use this configuration file as a starting point for your Erlang LS Emacs configuration. Whenever opening a project for the first time, you will be prompted by emacs-lsp to select the correct project root. In that occasion, you also have the opportunity to blacklist projects. Information about projects is stored in a file pointed by the lsp-session-file variable. Its default location is ~/.emacs.d/.lsp-session-v1 . You may need to prune or amend this file if you change your mind about blacklisting a project or if you erroneously select a project root. For more information about the lsp-session-file and emacs-lsp in general, please refer to the official documentation . Remember that the Erlang Language Server requires Erlang/OTP 21 or higher to run, so ensure that OTP 21+ is available in your PATH . This can be achieved, for example, by using the exec-path-from-shell Emacs package. Troubleshooting If things do not work as expected, we advise you to start Emacs with only the configuration from the provided sample file, using the following command: emacs -q -l [PATH-TO-ERLANG-LS]/misc/dotemacs This will remove from the equation potential incompatibilities with other packages or configurations that you may have on your workstation and that could conflict with Erlang LS. To be sure that you don't have outdated or incompatible packages installed, you may also want to rename your ~/.emacs.d directory while you are troubleshooting your Erlang LS Emacs setup. Also, ensure that Erlang (i.e. erl , escript and friends) and the erlang_ls executable are all available in your PATH . If they are not, you can try the following: ;; Ensure your Emacs environment looks like your user's shell one (package-require 'exec-path-from-shell) (exec-path-from-shell-initialize) Finally, to enable logging on the client-side, just: (setq lsp-log-io t) Tips and Tricks Shortcuts for code lenses and quick actions You can run M-x lsp-avy-lens to show letters next to code lenses. You can then press those letters to trigger the respective action. If your sideline is enabled ( (setq lsp-ui-sideline-enable t) ), you can also use M-x lsp-execute-code-action to trigger quick-fix actions.","title":"Emacs"},{"location":"editors/emacs/#emacs","text":"","title":"Emacs"},{"location":"editors/emacs/#setup","text":"The official lsp-mode package includes a client for the Erlang Language Server. Here you can find a sample Emacs configuration file which installs and configures all packages required to get all of the Erlang LS features working. Use this configuration file as a starting point for your Erlang LS Emacs configuration. Whenever opening a project for the first time, you will be prompted by emacs-lsp to select the correct project root. In that occasion, you also have the opportunity to blacklist projects. Information about projects is stored in a file pointed by the lsp-session-file variable. Its default location is ~/.emacs.d/.lsp-session-v1 . You may need to prune or amend this file if you change your mind about blacklisting a project or if you erroneously select a project root. For more information about the lsp-session-file and emacs-lsp in general, please refer to the official documentation . Remember that the Erlang Language Server requires Erlang/OTP 21 or higher to run, so ensure that OTP 21+ is available in your PATH . This can be achieved, for example, by using the exec-path-from-shell Emacs package.","title":"Setup"},{"location":"editors/emacs/#troubleshooting","text":"If things do not work as expected, we advise you to start Emacs with only the configuration from the provided sample file, using the following command: emacs -q -l [PATH-TO-ERLANG-LS]/misc/dotemacs This will remove from the equation potential incompatibilities with other packages or configurations that you may have on your workstation and that could conflict with Erlang LS. To be sure that you don't have outdated or incompatible packages installed, you may also want to rename your ~/.emacs.d directory while you are troubleshooting your Erlang LS Emacs setup. Also, ensure that Erlang (i.e. erl , escript and friends) and the erlang_ls executable are all available in your PATH . If they are not, you can try the following: ;; Ensure your Emacs environment looks like your user's shell one (package-require 'exec-path-from-shell) (exec-path-from-shell-initialize) Finally, to enable logging on the client-side, just: (setq lsp-log-io t)","title":"Troubleshooting"},{"location":"editors/emacs/#tips-and-tricks","text":"","title":"Tips and Tricks"},{"location":"editors/emacs/#shortcuts-for-code-lenses-and-quick-actions","text":"You can run M-x lsp-avy-lens to show letters next to code lenses. You can then press those letters to trigger the respective action. If your sideline is enabled ( (setq lsp-ui-sideline-enable t) ), you can also use M-x lsp-execute-code-action to trigger quick-fix actions.","title":"Shortcuts for code lenses and quick actions"},{"location":"editors/intellij/","text":"IntelliJ Setup WARNING : The current version of the IntelliJ LSP plugin (1.5.4) is quite limited, so not all of the Erlang Language Server capabilities are available in IntelliJ. First of all, ensure you have the LSP Support plugin installed. If you don't, you can simply navigate to: Preferences > Plugins > Browse Repositories Search for \"LSP Support\" and install the respective plugin. Restart IntelliJ, then navigate to: Preferences > Languages and Frameworks > Language Server Protocol > Server Definitions There you can instruct IntelliJ on how to start the server. Select Raw Command , set erl;hrl as the extension, then add as the command: /ABSOLUTE/PATH/TO/erlang_ls/_build/default/bin/erlang_ls --transport stdio Ensure you use an absolute path. The plugin does not seem to understand the ~ symbol. For the above command to work, IntelliJ requires the PATH variable to be correctly configured to include Erlang 20+. To circumvent this issues on Mac OS, the best way is to start IntelliJ from the terminal (i.e. via the idea command) and not via Spotlight. To visualize documentation and type specs while hovering a function, ensure the Show quick documentation on mouse move option is enabled in your IntelliJ preferences: Preferences > Editor > General There, you can also set a delay in milliseconds. For more information about how to configure the IntelliJ LSP Client, please refer to the project GitHub page . Troubleshooting In some cases, the IntelliJ LSP client may not be able to connect to the server. In such cases, the first step is to enable logging: Preferences > Languages and Frameworks > Language Server Protocol Check the Log servers communications check-box there. After restarting IntelliJ, you will notice an extra lsp directory created inside your Erlang project. This directory contains the error and output logs, which should give you a hint about what is going on. An alternative source of information is represented by the IntelliJ logs: Help > Show Logs","title":"IntelliJ"},{"location":"editors/intellij/#intellij","text":"","title":"IntelliJ"},{"location":"editors/intellij/#setup","text":"WARNING : The current version of the IntelliJ LSP plugin (1.5.4) is quite limited, so not all of the Erlang Language Server capabilities are available in IntelliJ. First of all, ensure you have the LSP Support plugin installed. If you don't, you can simply navigate to: Preferences > Plugins > Browse Repositories Search for \"LSP Support\" and install the respective plugin. Restart IntelliJ, then navigate to: Preferences > Languages and Frameworks > Language Server Protocol > Server Definitions There you can instruct IntelliJ on how to start the server. Select Raw Command , set erl;hrl as the extension, then add as the command: /ABSOLUTE/PATH/TO/erlang_ls/_build/default/bin/erlang_ls --transport stdio Ensure you use an absolute path. The plugin does not seem to understand the ~ symbol. For the above command to work, IntelliJ requires the PATH variable to be correctly configured to include Erlang 20+. To circumvent this issues on Mac OS, the best way is to start IntelliJ from the terminal (i.e. via the idea command) and not via Spotlight. To visualize documentation and type specs while hovering a function, ensure the Show quick documentation on mouse move option is enabled in your IntelliJ preferences: Preferences > Editor > General There, you can also set a delay in milliseconds. For more information about how to configure the IntelliJ LSP Client, please refer to the project GitHub page .","title":"Setup"},{"location":"editors/intellij/#troubleshooting","text":"In some cases, the IntelliJ LSP client may not be able to connect to the server. In such cases, the first step is to enable logging: Preferences > Languages and Frameworks > Language Server Protocol Check the Log servers communications check-box there. After restarting IntelliJ, you will notice an extra lsp directory created inside your Erlang project. This directory contains the error and output logs, which should give you a hint about what is going on. An alternative source of information is represented by the IntelliJ logs: Help > Show Logs","title":"Troubleshooting"},{"location":"editors/spacemacs/","text":"Spacemacs Setup The develop branch includes an Erlang layer with support for the Language Server Protocol using Erlang LS as backend. Here you can find information about installation and configuration, as well as supported features. Both, lsp and erlang-mode variables, can be configured when setting up dotspacemacs-configuration-layers , e.g: dotspacemacs-configuration-layers '( ;... lsp (erlang :variables erlang-backend 'lsp erlang-root-dir \"<path to>/otp_22/lib/erlang\" erlang-man-root-dir \"<path to>/otp_22_kred/lib/erlang/man\" erlang-fill-column 100 company-minimum-prefix-length 1 company-idle-delay 0.3 lsp-ui-doc-position 'bottom) ;... )","title":"Spacemacs"},{"location":"editors/spacemacs/#spacemacs","text":"","title":"Spacemacs"},{"location":"editors/spacemacs/#setup","text":"The develop branch includes an Erlang layer with support for the Language Server Protocol using Erlang LS as backend. Here you can find information about installation and configuration, as well as supported features. Both, lsp and erlang-mode variables, can be configured when setting up dotspacemacs-configuration-layers , e.g: dotspacemacs-configuration-layers '( ;... lsp (erlang :variables erlang-backend 'lsp erlang-root-dir \"<path to>/otp_22/lib/erlang\" erlang-man-root-dir \"<path to>/otp_22_kred/lib/erlang/man\" erlang-fill-column 100 company-minimum-prefix-length 1 company-idle-delay 0.3 lsp-ui-doc-position 'bottom) ;... )","title":"Setup"},{"location":"editors/sublime3/","text":"Sublime Text 3 Setup Install the Erlang LS Language Server To install Erlang LS: git clone https://github.com/erlang-ls cd erlang_ls rebar3 escriptize This will create an Erlang escript in: _build/default/bin/erlang_ls Try running Erlang LS with the --version flag to verify everything works as expected: _build/default/bin/erlang_ls --version Ensure erlang_ls is in your PATH . Install the LSP Client for Sublime Text 3 Using the Command Palette from the Tools menu, select Package Control: Install Package and install the LSP package. After that is done, go to: Preferences -> Package Settings -> LSP -> Settings Add an Erlang client by adding the following configuration to the LSP.sublime-settings - User file: { \"clients\": { \"erlang-ls\": { \"command\" : [ \"erlang_ls\", \"--transport\", \"stdio\" ], \"enabled\" : true, \"languageId\": \"erlang\", \"scopes\" : [ \"source.erlang\" ], \"syntaxes\" : [\"Packages/Erlang/Erlang.sublime-syntax\"] } }, // Allow up to 30 secs to `erlang_ls` to respond to `initialize` // (it requires less, but just to be on the safe side) \"initialize_timeout\": 30 } That's it. Open a new Erlang project and enjoy Erlang LS. Troubleshooting Ensure Erlang LS is in your PATH To be able to use Erlang LS, the erlang_ls escript needs to be in your path. Are You a macOS User? If you are a macOS user, you may consider using the following plugin to ensure your PATH is correctly used by Sublime Text 3: https://github.com/int3h/SublimeFixMacPath Enabling logging In case of issues, you can enable extra logging for the LSP package by adding the following configuration to your LSP.sublime-settings - User file: { // Show verbose debug messages in the sublime console. \"log_debug\": true, // Show messages from language servers in the Language Servers output // panel. \"log_server\": true, // Show language server stderr output in the Language Servers output // panel. \"log_stderr\": true, // Show full JSON-RPC requests/responses/notifications in the Language // Servers output panel. \"log_payloads\": true } The Sublime console can be toggled using the Ctrl-` shortcut. The output panel can be toggled from the command palette with the command LSP: Toggle Panel: Language Servers .","title":"Sublime Text 3"},{"location":"editors/sublime3/#sublime-text-3","text":"","title":"Sublime Text 3"},{"location":"editors/sublime3/#setup","text":"","title":"Setup"},{"location":"editors/sublime3/#install-the-erlang-ls-language-server","text":"To install Erlang LS: git clone https://github.com/erlang-ls cd erlang_ls rebar3 escriptize This will create an Erlang escript in: _build/default/bin/erlang_ls Try running Erlang LS with the --version flag to verify everything works as expected: _build/default/bin/erlang_ls --version Ensure erlang_ls is in your PATH .","title":"Install the Erlang LS Language Server"},{"location":"editors/sublime3/#install-the-lsp-client-for-sublime-text-3","text":"Using the Command Palette from the Tools menu, select Package Control: Install Package and install the LSP package. After that is done, go to: Preferences -> Package Settings -> LSP -> Settings Add an Erlang client by adding the following configuration to the LSP.sublime-settings - User file: { \"clients\": { \"erlang-ls\": { \"command\" : [ \"erlang_ls\", \"--transport\", \"stdio\" ], \"enabled\" : true, \"languageId\": \"erlang\", \"scopes\" : [ \"source.erlang\" ], \"syntaxes\" : [\"Packages/Erlang/Erlang.sublime-syntax\"] } }, // Allow up to 30 secs to `erlang_ls` to respond to `initialize` // (it requires less, but just to be on the safe side) \"initialize_timeout\": 30 } That's it. Open a new Erlang project and enjoy Erlang LS.","title":"Install the LSP Client for Sublime Text 3"},{"location":"editors/sublime3/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"editors/sublime3/#ensure-erlang-ls-is-in-your-path","text":"To be able to use Erlang LS, the erlang_ls escript needs to be in your path. Are You a macOS User? If you are a macOS user, you may consider using the following plugin to ensure your PATH is correctly used by Sublime Text 3: https://github.com/int3h/SublimeFixMacPath","title":"Ensure Erlang LS is in your PATH"},{"location":"editors/sublime3/#enabling-logging","text":"In case of issues, you can enable extra logging for the LSP package by adding the following configuration to your LSP.sublime-settings - User file: { // Show verbose debug messages in the sublime console. \"log_debug\": true, // Show messages from language servers in the Language Servers output // panel. \"log_server\": true, // Show language server stderr output in the Language Servers output // panel. \"log_stderr\": true, // Show full JSON-RPC requests/responses/notifications in the Language // Servers output panel. \"log_payloads\": true } The Sublime console can be toggled using the Ctrl-` shortcut. The output panel can be toggled from the command palette with the command LSP: Toggle Panel: Language Servers .","title":"Enabling logging"},{"location":"editors/theia/","text":"Theia IDE Setup It is possible to use Erlang LS in Theia IDE by including Erlang/OTP in your running instance and installing the VSCode extension . If you want to give it a try by using GitPod click here . To use this same setup with your Erlang project (hosted in GitHub or Gitlab) you can find the GitPod configuration in .gitpod.yml .","title":"Theia IDE"},{"location":"editors/theia/#theia-ide","text":"","title":"Theia IDE"},{"location":"editors/theia/#setup","text":"It is possible to use Erlang LS in Theia IDE by including Erlang/OTP in your running instance and installing the VSCode extension . If you want to give it a try by using GitPod click here . To use this same setup with your Erlang project (hosted in GitHub or Gitlab) you can find the GitPod configuration in .gitpod.yml .","title":"Setup"},{"location":"editors/vim/","text":"Vim / NeoVim NOTE : Neovim has recently included a native Language Server , though it is not yet available over in many distributed versions (e.g. brew ). Once the native solution is verified to work well, we will update this documentation to reflect the setup. Setup The following instructions should enable Erlang language server integration via the Coc system (an intellisense engine for both Vim and Neovim). Installing Coc with vim-plug For vim-plug users with nodejs >= 10.12 installed, installing the plugin is just: \" Use release branch (Recommended) Plug 'neoclide/coc.nvim', {'branch': 'release'} To make the plugin aware of erlang_ls however, it needs configuration. Coc plugin configuration Coc is configured through coc-settings.json , which can be opened in vim by issuing the command: :CocConfig If erlang_ls is present in your $PATH variable then the following config should suffice: { \"languageserver\": { \"erlang\": { \"command\": \"erlang_ls\", \"filetypes\": [\"erlang\"] } } } When vim starts editing a file of filetype erlang , if the erlang_ls server can be started and connected to, you should see something like the following message from Coc: [coc.nvim] Erlang LS (in erlang_ls), version: X.Y.Z+build.REF For suggestions on configuring Coc and possible key-bindings see its example configuration documentation .","title":"Vim"},{"location":"editors/vim/#vim-neovim","text":"NOTE : Neovim has recently included a native Language Server , though it is not yet available over in many distributed versions (e.g. brew ). Once the native solution is verified to work well, we will update this documentation to reflect the setup.","title":"Vim / NeoVim"},{"location":"editors/vim/#setup","text":"The following instructions should enable Erlang language server integration via the Coc system (an intellisense engine for both Vim and Neovim).","title":"Setup"},{"location":"editors/vim/#installing-coc-with-vim-plug","text":"For vim-plug users with nodejs >= 10.12 installed, installing the plugin is just: \" Use release branch (Recommended) Plug 'neoclide/coc.nvim', {'branch': 'release'} To make the plugin aware of erlang_ls however, it needs configuration.","title":"Installing Coc with vim-plug"},{"location":"editors/vim/#coc-plugin-configuration","text":"Coc is configured through coc-settings.json , which can be opened in vim by issuing the command: :CocConfig If erlang_ls is present in your $PATH variable then the following config should suffice: { \"languageserver\": { \"erlang\": { \"command\": \"erlang_ls\", \"filetypes\": [\"erlang\"] } } } When vim starts editing a file of filetype erlang , if the erlang_ls server can be started and connected to, you should see something like the following message from Coc: [coc.nvim] Erlang LS (in erlang_ls), version: X.Y.Z+build.REF For suggestions on configuring Coc and possible key-bindings see its example configuration documentation .","title":"Coc plugin configuration"},{"location":"editors/vscode/","text":"VSCode Setup The Erlang Language Server is available in VSCode via a dedicated extension . To try it out, simply open VSCode and install the extension via the Marketplace: Preferences > Extensions Look for the erlang-ls extension and install it. That's it. Remember that the Erlang Language Server requires Erlang/OTP 21 or higher to run, so ensure that OTP 21+ is available in your PATH .","title":"VSCode"},{"location":"editors/vscode/#vscode","text":"","title":"VSCode"},{"location":"editors/vscode/#setup","text":"The Erlang Language Server is available in VSCode via a dedicated extension . To try it out, simply open VSCode and install the extension via the Marketplace: Preferences > Extensions Look for the erlang-ls extension and install it. That's it. Remember that the Erlang Language Server requires Erlang/OTP 21 or higher to run, so ensure that OTP 21+ is available in your PATH .","title":"Setup"}]}