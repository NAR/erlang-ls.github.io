{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Erlang LS Implementing features such as auto-complete or go-to-definition for a programming language is not trivial. Traditionally, this work had to be repeated for each development tool and it required a mix of expertise in both the targeted programming language and the programming language internally used by the development tool of choice. A brilliant intuition, the Language Server Protocol , also known as LSP , changes the rules of the game. A real blessing for the Erlang community. Erlang LS is a language server providing language features for the Erlang programming language. The server works with Emacs , VSCode , Sublime Text 3 , Vim and probably many more text editors and IDE which adhere to the LSP protocol. These pages contain all the information needed to configure your favourite text editor or IDE and to work with Erlang LS. You will also find instructions on how to configure the server to recognize the structure of your projects and to troubleshoot your installation when things do not work as expected. Get in touch If you have any questions about the project, feel free to open a new issue on GitHub. You can also join the #erlang-ls channel in the Erlanger Slack if you would like to get involved or if you prefer a more informal mean of communication. All contributions are welcome, be them in the form of a bug report, a question, feedback, or code.","title":"Overview"},{"location":"#welcome-to-erlang-ls","text":"Implementing features such as auto-complete or go-to-definition for a programming language is not trivial. Traditionally, this work had to be repeated for each development tool and it required a mix of expertise in both the targeted programming language and the programming language internally used by the development tool of choice. A brilliant intuition, the Language Server Protocol , also known as LSP , changes the rules of the game. A real blessing for the Erlang community. Erlang LS is a language server providing language features for the Erlang programming language. The server works with Emacs , VSCode , Sublime Text 3 , Vim and probably many more text editors and IDE which adhere to the LSP protocol. These pages contain all the information needed to configure your favourite text editor or IDE and to work with Erlang LS. You will also find instructions on how to configure the server to recognize the structure of your projects and to troubleshoot your installation when things do not work as expected.","title":"Welcome to Erlang LS"},{"location":"#get-in-touch","text":"If you have any questions about the project, feel free to open a new issue on GitHub. You can also join the #erlang-ls channel in the Erlanger Slack if you would like to get involved or if you prefer a more informal mean of communication. All contributions are welcome, be them in the form of a bug report, a question, feedback, or code.","title":"Get in touch"},{"location":"features/","text":"Features Code Completion Get context-aware code completions for function names, macros, records, variable names and more. Go To Definition Navigate to the definition of a function, macro, record or type. Go To Implementation for OTP Behaviours Hovering a gen_server:start_link call? Jump to the respective init function with a single keystroke. Signature Suggestions Never remember the order of the lists:keytake/3 arguments? You are not alone. We got you covered. Compiler Diagnostics Display warnings and errors from the compiler. Inline. Dialyzer Diagnostics It has never been so easy to make Dialyzer happy. Elvis Diagnostics Display Elvis style suggestions inline. No more nit-picking comments from colleagues! Edoc Hover a local or remote function to see its edoc . You will miss this feature so much when edocs are not available that you will start writing them! Navigation for Included Files Navigate to included files with a single click. Find/Peek References Who is calling this function? Figure it out without leaving the current context. Outline Get a nice outline of your module on the side and jump between functions. Workspace Symbols Jump to the module you're looking for, in no time. Folding Focus on what's important, fold the rest.","title":"Features"},{"location":"features/#features","text":"","title":"Features"},{"location":"features/#code-completion","text":"Get context-aware code completions for function names, macros, records, variable names and more.","title":"Code Completion"},{"location":"features/#go-to-definition","text":"Navigate to the definition of a function, macro, record or type.","title":"Go To Definition"},{"location":"features/#go-to-implementation-for-otp-behaviours","text":"Hovering a gen_server:start_link call? Jump to the respective init function with a single keystroke.","title":"Go To Implementation for OTP Behaviours"},{"location":"features/#signature-suggestions","text":"Never remember the order of the lists:keytake/3 arguments? You are not alone. We got you covered.","title":"Signature Suggestions"},{"location":"features/#compiler-diagnostics","text":"Display warnings and errors from the compiler. Inline.","title":"Compiler Diagnostics"},{"location":"features/#dialyzer-diagnostics","text":"It has never been so easy to make Dialyzer happy.","title":"Dialyzer Diagnostics"},{"location":"features/#elvis-diagnostics","text":"Display Elvis style suggestions inline. No more nit-picking comments from colleagues!","title":"Elvis Diagnostics"},{"location":"features/#edoc","text":"Hover a local or remote function to see its edoc . You will miss this feature so much when edocs are not available that you will start writing them!","title":"Edoc"},{"location":"features/#navigation-for-included-files","text":"Navigate to included files with a single click.","title":"Navigation for Included Files"},{"location":"features/#findpeek-references","text":"Who is calling this function? Figure it out without leaving the current context.","title":"Find/Peek References"},{"location":"features/#outline","text":"Get a nice outline of your module on the side and jump between functions.","title":"Outline"},{"location":"features/#workspace-symbols","text":"Jump to the module you're looking for, in no time.","title":"Workspace Symbols"},{"location":"features/#folding","text":"Focus on what's important, fold the rest.","title":"Folding"},{"location":"internals/","text":"Internals The erlang_ls Database The erlang_ls language server uses Mnesia to persist information. A new database is created and maintained for each project/OTP pair. Databases are stored in the application cache directory, which varies according to the operating system used. Generally speaking, the directory should be: Operating System Database Dir Linux /home/USER/.cache/erlang_ls OS X /Users/USER/Library/Caches/erlang_ls Windows c:/Users/USER/AppData/Local/erlang_ls/Cache You can also run the following command on an Erlang shell to identify the Database Directory on your system: > filename:basedir(user_cache, \"erlang_ls\").","title":"Internals"},{"location":"internals/#internals","text":"","title":"Internals"},{"location":"internals/#the-erlang_ls-database","text":"The erlang_ls language server uses Mnesia to persist information. A new database is created and maintained for each project/OTP pair. Databases are stored in the application cache directory, which varies according to the operating system used. Generally speaking, the directory should be: Operating System Database Dir Linux /home/USER/.cache/erlang_ls OS X /Users/USER/Library/Caches/erlang_ls Windows c:/Users/USER/AppData/Local/erlang_ls/Cache You can also run the following command on an Erlang shell to identify the Database Directory on your system: > filename:basedir(user_cache, \"erlang_ls\").","title":"The erlang_ls Database"},{"location":"troubleshooting/","text":"Troubleshooting Attaching to the Language Server via a Remote Shell Once an instance of the server is running, find the name of the node in the logs or by running epmd -names . It will look something like: $ epmd -names epmd: up and running on port 4369 with data: name erlang_ls_62880311918 at port 50819 And you can connect to it via: erl -sname debug -remsh erlang_ls_62880311918@`HOSTNAME` The redbug application is included in the escript, so feel free to use it. Logging Logs are written to your platform's log directory (i.e. the return value from filename:basedir(user_log, \"erlang_ls\") ), in a file named server.log . It's possible to customize the logging directory by using the --log-dir option when starting the server. It's also possible to specify the verbosity of the logs by using the --log-level option. In addition to the notice , debug , info , warning and error levels, syslog style loglevel comparison flags can also be used.","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#attaching-to-the-language-server-via-a-remote-shell","text":"Once an instance of the server is running, find the name of the node in the logs or by running epmd -names . It will look something like: $ epmd -names epmd: up and running on port 4369 with data: name erlang_ls_62880311918 at port 50819 And you can connect to it via: erl -sname debug -remsh erlang_ls_62880311918@`HOSTNAME` The redbug application is included in the escript, so feel free to use it.","title":"Attaching to the Language Server via a Remote Shell"},{"location":"troubleshooting/#logging","text":"Logs are written to your platform's log directory (i.e. the return value from filename:basedir(user_log, \"erlang_ls\") ), in a file named server.log . It's possible to customize the logging directory by using the --log-dir option when starting the server. It's also possible to specify the verbosity of the logs by using the --log-level option. In addition to the notice , debug , info , warning and error levels, syslog style loglevel comparison flags can also be used.","title":"Logging"},{"location":"editors/emacs/","text":"Emacs Setup The official lsp-mode package includes a client for the Erlang Language Server. Here you can find a sample Emacs configuration file which installs and configures all packages required to get all of the Erlang LS features working. Use this configuration file as a starting point for your Erlang LS Emacs configuration. Whenever opening a project for the first time, you will be prompted by emacs-lsp to select the correct project root. In that occasion, you also have the opportunity to blacklist projects. Information about projects is stored in a file pointed by the lsp-session-file variable. Its default location is ~/.emacs.d/.lsp-session-v1 . You may need to prune or amend this file if you change your mind about blacklisting a project or if you erroneously select a project root. For more information about the lsp-session-file and emacs-lsp in general, please refer to the official documentation . Remember that the Erlang Language Server requires Erlang/OTP 21 or higher to run, so ensure that OTP 21+ is available in your PATH . This can be achieved, for example, by using the exec-path-from-shell Emacs package. Troubleshooting If things do not work as expected, we advise you to start Emacs with only the configuration from the provided sample file, using the following command: emacs -q -l [PATH-TO-ERLANG-LS]/misc/dotemacs This will remove from the equation potential incompatibilities with other packages or configurations that you may have on your workstation and that could conflict with Erlang LS. To be sure that you don't have outdated or incompatible packages installed, you may also want to rename your ~/.emacs.d directory while you are troubleshooting your Erlang LS Emacs setup. Also, ensure that Erlang (i.e. erl , escript and friends) and the erlang_ls executable are all available in your PATH . If they are not, you can try the following: ;; Ensure your Emacs environment looks like your user's shell one (package-require 'exec-path-from-shell) (exec-path-from-shell-initialize) Finally, to enable logging on the client-side, just: (setq lsp-log-io t)","title":"Emacs"},{"location":"editors/emacs/#emacs","text":"","title":"Emacs"},{"location":"editors/emacs/#setup","text":"The official lsp-mode package includes a client for the Erlang Language Server. Here you can find a sample Emacs configuration file which installs and configures all packages required to get all of the Erlang LS features working. Use this configuration file as a starting point for your Erlang LS Emacs configuration. Whenever opening a project for the first time, you will be prompted by emacs-lsp to select the correct project root. In that occasion, you also have the opportunity to blacklist projects. Information about projects is stored in a file pointed by the lsp-session-file variable. Its default location is ~/.emacs.d/.lsp-session-v1 . You may need to prune or amend this file if you change your mind about blacklisting a project or if you erroneously select a project root. For more information about the lsp-session-file and emacs-lsp in general, please refer to the official documentation . Remember that the Erlang Language Server requires Erlang/OTP 21 or higher to run, so ensure that OTP 21+ is available in your PATH . This can be achieved, for example, by using the exec-path-from-shell Emacs package.","title":"Setup"},{"location":"editors/emacs/#troubleshooting","text":"If things do not work as expected, we advise you to start Emacs with only the configuration from the provided sample file, using the following command: emacs -q -l [PATH-TO-ERLANG-LS]/misc/dotemacs This will remove from the equation potential incompatibilities with other packages or configurations that you may have on your workstation and that could conflict with Erlang LS. To be sure that you don't have outdated or incompatible packages installed, you may also want to rename your ~/.emacs.d directory while you are troubleshooting your Erlang LS Emacs setup. Also, ensure that Erlang (i.e. erl , escript and friends) and the erlang_ls executable are all available in your PATH . If they are not, you can try the following: ;; Ensure your Emacs environment looks like your user's shell one (package-require 'exec-path-from-shell) (exec-path-from-shell-initialize) Finally, to enable logging on the client-side, just: (setq lsp-log-io t)","title":"Troubleshooting"},{"location":"editors/intellij/","text":"IntelliJ Setup WARNING : The current version of the IntelliJ LSP plugin (1.5.4) is quite limited, so not all of the Erlang Language Server capabilities are available in IntelliJ. First of all, ensure you have the LSP Support plugin installed. If you don't, you can simply navigate to: Preferences > Plugins > Browse Repositories Search for \"LSP Support\" and install the respective plugin. Restart IntelliJ, then navigate to: Preferences > Languages and Frameworks > Language Server Protocol > Server Definitions There you can instruct IntelliJ on how to start the server. Select Raw Command , set erl;hrl as the extension, then add as the command: /ABSOLUTE/PATH/TO/erlang_ls/_build/default/bin/erlang_ls --transport stdio Ensure you use an absolute path. The plugin does not seem to understand the ~ symbol. For the above command to work, IntelliJ requires the PATH variable to be correctly configured to include Erlang 20+. To circumvent this issues on Mac OS, the best way is to start IntelliJ from the terminal (i.e. via the idea command) and not via Spotlight. To visualize documentation and type specs while hovering a function, ensure the Show quick documentation on mouse move option is enabled in your IntelliJ preferences: Preferences > Editor > General There, you can also set a delay in milliseconds. For more information about how to configure the IntelliJ LSP Client, please refer to the project GitHub page . Troubleshooting In some cases, the IntelliJ LSP client may not be able to connect to the server. In such cases, the first step is to enable logging: Preferences > Languages and Frameworks > Language Server Protocol Check the Log servers communications check-box there. After restarting IntelliJ, you will notice an extra lsp directory created inside your Erlang project. This directory contains the error and output logs, which should give you a hint about what is going on. An alternative source of information is represented by the IntelliJ logs: Help > Show Logs","title":"IntelliJ"},{"location":"editors/intellij/#intellij","text":"","title":"IntelliJ"},{"location":"editors/intellij/#setup","text":"WARNING : The current version of the IntelliJ LSP plugin (1.5.4) is quite limited, so not all of the Erlang Language Server capabilities are available in IntelliJ. First of all, ensure you have the LSP Support plugin installed. If you don't, you can simply navigate to: Preferences > Plugins > Browse Repositories Search for \"LSP Support\" and install the respective plugin. Restart IntelliJ, then navigate to: Preferences > Languages and Frameworks > Language Server Protocol > Server Definitions There you can instruct IntelliJ on how to start the server. Select Raw Command , set erl;hrl as the extension, then add as the command: /ABSOLUTE/PATH/TO/erlang_ls/_build/default/bin/erlang_ls --transport stdio Ensure you use an absolute path. The plugin does not seem to understand the ~ symbol. For the above command to work, IntelliJ requires the PATH variable to be correctly configured to include Erlang 20+. To circumvent this issues on Mac OS, the best way is to start IntelliJ from the terminal (i.e. via the idea command) and not via Spotlight. To visualize documentation and type specs while hovering a function, ensure the Show quick documentation on mouse move option is enabled in your IntelliJ preferences: Preferences > Editor > General There, you can also set a delay in milliseconds. For more information about how to configure the IntelliJ LSP Client, please refer to the project GitHub page .","title":"Setup"},{"location":"editors/intellij/#troubleshooting","text":"In some cases, the IntelliJ LSP client may not be able to connect to the server. In such cases, the first step is to enable logging: Preferences > Languages and Frameworks > Language Server Protocol Check the Log servers communications check-box there. After restarting IntelliJ, you will notice an extra lsp directory created inside your Erlang project. This directory contains the error and output logs, which should give you a hint about what is going on. An alternative source of information is represented by the IntelliJ logs: Help > Show Logs","title":"Troubleshooting"},{"location":"editors/sublime3/","text":"Sublime Text 3 Setup Using the Command Palette , select Package Control: Install Package and install the LSP package. After that is done, go to: Preferences -> Package Settings -> LSP -> Settings Add an Erlang client by adding the following configuration to the LSP.sublime-settings - User file: { \"clients\": { \"erlang-ls\": { \"command\" : [ \"/path/to/my/erlang_ls\", \"--transport\", \"stdio\" ], \"enabled\" : true, \"languageId\": \"erlang\", \"scopes\" : [ \"source.erlang\" ], \"syntaxes\" : [\"Packages/Erlang/Erlang.sublime-syntax\"] } } } That's it. Open a new Erlang project and enjoy Erlang LS. Troubleshooting In case of issues, you can enable extra logging for the LSP package by adding the following configuration to your LSP.sublime-settings - User file: { // Show verbose debug messages in the sublime console. \"log_debug\": true, // Show messages from language servers in the Language Servers output // panel. \"log_server\": true, // Show language server stderr output in the Language Servers output // panel. \"log_stderr\": true, // Show full JSON-RPC requests/responses/notifications in the Language // Servers output panel. \"log_payloads\": true } The Sublime console can be toggled using the Ctrl-` shortcut. The output panel can be toggled from the command palette with the command LSP: Toggle Panel: Language Servers .","title":"Sublime Text 3"},{"location":"editors/sublime3/#sublime-text-3","text":"","title":"Sublime Text 3"},{"location":"editors/sublime3/#setup","text":"Using the Command Palette , select Package Control: Install Package and install the LSP package. After that is done, go to: Preferences -> Package Settings -> LSP -> Settings Add an Erlang client by adding the following configuration to the LSP.sublime-settings - User file: { \"clients\": { \"erlang-ls\": { \"command\" : [ \"/path/to/my/erlang_ls\", \"--transport\", \"stdio\" ], \"enabled\" : true, \"languageId\": \"erlang\", \"scopes\" : [ \"source.erlang\" ], \"syntaxes\" : [\"Packages/Erlang/Erlang.sublime-syntax\"] } } } That's it. Open a new Erlang project and enjoy Erlang LS.","title":"Setup"},{"location":"editors/sublime3/#troubleshooting","text":"In case of issues, you can enable extra logging for the LSP package by adding the following configuration to your LSP.sublime-settings - User file: { // Show verbose debug messages in the sublime console. \"log_debug\": true, // Show messages from language servers in the Language Servers output // panel. \"log_server\": true, // Show language server stderr output in the Language Servers output // panel. \"log_stderr\": true, // Show full JSON-RPC requests/responses/notifications in the Language // Servers output panel. \"log_payloads\": true } The Sublime console can be toggled using the Ctrl-` shortcut. The output panel can be toggled from the command palette with the command LSP: Toggle Panel: Language Servers .","title":"Troubleshooting"},{"location":"editors/theia/","text":"Theia IDE Setup It is possible to use Erlang LS in Theia IDE by including Erlang/OTP in your running instance and installing the VSCode extension . If you want to give it a try by using GitPod click here . To use this same setup with your Erlang project (hosted in GitHub or Gitlab) you can find the GitPod configuration in .gitpod.yml .","title":"Theia IDE"},{"location":"editors/theia/#theia-ide","text":"","title":"Theia IDE"},{"location":"editors/theia/#setup","text":"It is possible to use Erlang LS in Theia IDE by including Erlang/OTP in your running instance and installing the VSCode extension . If you want to give it a try by using GitPod click here . To use this same setup with your Erlang project (hosted in GitHub or Gitlab) you can find the GitPod configuration in .gitpod.yml .","title":"Setup"},{"location":"editors/vim/","text":"Vim / NeoVim Setup For vim-plug users, install Coc and its plugin coc-erlang_ls by entering the following in your init.vim or .vimrc plugin section: \" Use release branch (Recommend) Plug 'neoclide/coc.nvim', {'branch': 'release'} Plug 'hyhugh/coc-erlang_ls', {'do': 'yarn install --frozen-lockfile'} You should ensure your yarn has frozen-lockfile support (current version distributed by brew does not). Then restart vim and run :PlugInstall . If the erlang_ls server is running, and you have configured the CoC plugin , then when vim starts you should see the message that Coc has connected to it: [coc.nvim] coc-erlang_ls is ready For suggestions on configuring Coc see its example configuration documentation .","title":"Vim"},{"location":"editors/vim/#vim-neovim","text":"","title":"Vim / NeoVim"},{"location":"editors/vim/#setup","text":"For vim-plug users, install Coc and its plugin coc-erlang_ls by entering the following in your init.vim or .vimrc plugin section: \" Use release branch (Recommend) Plug 'neoclide/coc.nvim', {'branch': 'release'} Plug 'hyhugh/coc-erlang_ls', {'do': 'yarn install --frozen-lockfile'} You should ensure your yarn has frozen-lockfile support (current version distributed by brew does not). Then restart vim and run :PlugInstall . If the erlang_ls server is running, and you have configured the CoC plugin , then when vim starts you should see the message that Coc has connected to it: [coc.nvim] coc-erlang_ls is ready For suggestions on configuring Coc see its example configuration documentation .","title":"Setup"},{"location":"editors/vscode/","text":"VSCode Setup The Erlang Language Server is available in VSCode via a dedicated extension . To try it out, simply open VSCode and install the extension via the Marketplace: Preferences > Extensions Look for the erlang-ls extension and install it. That's it. Remember that the Erlang Language Server requires Erlang/OTP 21 or higher to run, so ensure that OTP 21+ is available in your PATH .","title":"VSCode"},{"location":"editors/vscode/#vscode","text":"","title":"VSCode"},{"location":"editors/vscode/#setup","text":"The Erlang Language Server is available in VSCode via a dedicated extension . To try it out, simply open VSCode and install the extension via the Marketplace: Preferences > Extensions Look for the erlang-ls extension and install it. That's it. Remember that the Erlang Language Server requires Erlang/OTP 21 or higher to run, so ensure that OTP 21+ is available in your PATH .","title":"Setup"}]}